#!/usr/bin/env bash
set -euo pipefail

# Offline CVE/fixed-version table for RHEL 8.10 (extend as needed).
# Format: pkg|fixed_version|cve_ids (comma-separated, optional)
DB="$(cat <<'EOF'
glibc|2.28-251.el8_10|CVE-2025-0395
libxml2|2.9.7-18.el8_10|CVE-2024-25062
krb5-libs|1.18.2-30.el8_10|CVE-2024-3596
sqlite|3.26.0-19.el8_10|
openldap|2.4.46-19.el8_10|
openssl|1:1.1.1k-12.el8_10|
openssh|8.0p1-24.el8_10|
curl|7.61.1-33.el8_10|
bind|32:9.11.36-16.el8_10|
httpd|2.4.37-67.el8_10|
nginx|1:1.20.1-14.el8_10|
mariadb|3:10.3.39-1.module_el8.10.0+...|
postgresql|12.18-1.module_el8.10.0+...|
samba|4.19.5-5.el8_10|
systemd|239-82.el8_10.2|
sudo|1.8.29-10.el8_10.1|
EOF
)"

has_rpmdev_vercmp=false
if command -v rpmdev-vercmp >/dev/null 2>&1; then
  has_rpmdev_vercmp=true
fi

compare_versions() {
  # returns 0 if A >= B, else 1
  local verA="$1" verB="$2"
  if $has_rpmdev_vercmp; then
    # rpmdev-vercmp exit: 11 (A>B), 12 (A<B), 0 (A=B)
    if rpmdev-vercmp "$verA" "$verB" >/dev/null 2>&1; then
      return 0
    else
      case $? in
        11) return 0 ;;
        12) return 1 ;;
         *) return 1 ;;
      esac
    fi
  else
    # Fallback (not epoch-aware)
    if printf '%s\n%s\n' "$verB" "$verA" | sort -V | tail -n1 | grep -qx "$verA"; then
      return 0
    else
      return 1
    fi
  fi
}

pad() { printf "%-14s" "$1"; }

echo "RHEL 8.10 Offline CVE Patch Check (air-gapped)"
echo "Date: $(date -Iseconds)"
$has_rpmdev_vercmp || echo "Note: Install 'rpmdevtools' for more accurate EVR comparisons (epoch-aware)."
echo

printf "%-14s | %-28s | %-28s | %-9s | %s\n" "PACKAGE" "INSTALLED" "FIXED (>=)" "STATUS" "CVEs (changelog hit)"
printf -- "----------------|------------------------------|------------------------------|-----------|----------------------\n"

# Iterate DB lines
while IFS='|' read -r pkg fixed cves; do
  [[ -z "${pkg:-}" || "${pkg:0:1}" == "#" ]] && continue

  if ! rpm -q "$pkg" >/dev/null 2>&1; then
    printf "%-14s | %-28s | %-28s | %-9s | %s\n" "$(pad "$pkg")" "NOT INSTALLED" "$fixed" "N/A" "-"
    continue
  fi

  # Get E:V-R (epoch:version-release) then strip epoch for fallback comparison if needed
  installed_evr="$(rpm -q --qf '%{EPOCH}:%{VERSION}-%{RELEASE}\n' "$pkg" 2>/dev/null | tail -n1)"
  installed_vr="${installed_evr#*:}"   # version-release
  # If fixed includes an epoch (e.g., 1:1.1.1k-12.el8_10), strip it for fallback comparison too
  fixed_vr="${fixed#*:}"

  status="UNKNOWN"
  if $has_rpmdev_vercmp; then
    # Use full EVR when available; synthesize epoch 0 if missing
    ie="${installed_evr%%:*}"; [[ "$ie" == "(none)" || -z "$ie" ]] && installed_evr="0:$installed_vr"
    fe="${fixed%%:*}";         [[ "$fe" == "$fixed" ]] && fixed="0:$fixed_vr"
    if compare_versions "$installed_evr" "$fixed"; then status="patched"; else status="vulnerable"; fi
  else
    if compare_versions "$installed_vr" "$fixed_vr"; then status="patched"; else status="vulnerable"; fi
  fi

  hits="-"
  if [[ -n "${cves:-}" ]]; then
    IFS=',' read -r -a arr <<<"$cves"
    found=()
    for c in "${arr[@]}"; do
      if rpm -q --changelog "$pkg" 2>/dev/null | grep -q "$c"; then
        found+=("$c")
      fi
    done
    [[ ${#found[@]} -gt 0 ]] && hits="${found[*]}"
  fi

  printf "%-14s | %-28s | %-28s | %-9s | %s\n" "$(pad "$pkg")" "$installed_vr" "$fixed_vr" "$status" "$hits"
done <<<"$DB"

echo
echo "Legend:"
echo "  patched   - Installed version is at or above the fixed baseline recorded here."
echo "  vulnerable- Installed version appears below the fixed baseline; update via offline repo/USB/Satellite when possible."
